unit Test


func isPrime(number: Int) -> Bool {
    var i = 2
    while i < number - 1 do {
        if number % i == 0 do {
            return false
        }
        i = i + 1
    }
    return true
}


/*
//func checkSinglePrime() {
//    print("please enter a number")
//    var number = Int(readln())
//    print("checking...")
//
//    if isPrime(number) do {
//        print(String(number) + " is a prime. Huraaay!")
//    else
//        print(String(number) + " is not a prime.")
//    }
//}

var maxNumber = 100 // 10_000 

func checkAllNumbersUpToX() {
    print("please enter a number")
	print(maxNumber)
    print("checking...")
    let imaxNumber = maxNumber
    var n = 2
    while n <= imaxNumber do {
        if isPrime(n) do {
            //print(String(n) + "    prime!")
        else
           //print(String(n) + "    --")
        }
        
        n = n + 1
    }

}

checkAllNumbersUpToX()
/*
print("please enter a number")
maxNumber = Int(readln())
checkAllNumbersUpToX()
if isPrime(maxNumber) do {
	print("lastNumberIsPrime")
else
	print("What have you done?!")
}
*/
func fib(i: Int) -> Int {
	if i == 1 or i == 0 do {
		return 1
	}
	
	return fib(i-1) + fib(i-2) 
}

func generateAllFibsUpToX() {
	print("please enter a number")

	var n = 10                       

	var i = 0
	while i <= n do {
		print("fib(" + String (i) + ") = " + String(fib(i)))
		i = i + 1
	}
}

generateAllFibsUpToX()
// */
//*
type Point = struct { 
	var x: Int var y: Int var z: Int 
	
	ctor (x: Int, y: Int, z: Int) {
		self.x = x
		self.y = y
		self.z = z
	}
	
	func str() -> String {
		return "Pointy(" + 
			String(self.x) + ", " + 
			String(self.y) + ", " + 
			String(self.z) + 
		")"
	}
	
	func rotate() {
		let tmp = self.x
		self.x = self.y
		self.y = self.z
		self.z = tmp
	}
	
	func translateX(amount: Int) {
		self.x = self.x + amount
	}
	
	func translateY(amount: Int) {
		self.y = self.y + amount
	}
	
	func translateZ(amount: Int) {
		self.z = self.z + amount
	}
	
}




func toString(p: Point) -> String {
	return "Point(" + String(p.x) + ", " + String(p.y) + ", " + String(p.z) + ")"
}

func print(p: Point) {
	print(toString(p))
}


var point: Point = Point(8, 7, 9)
/*
print(point.str())
print(point)

let z1 = point.z
let y1 = point.y
let x1 = point.x
print(x1)
print(y1)
print(z1)

let point2 = point

var point3 = point

print("")
print("point2:")
print(point2)
print(point2.str())

point2.rotate()
print("point2 rotatet:")
print(point2)

print("")
print("point3:")
print(point3)

point3.translateZ(7)
print("point3 translated Z:")
print(point3)
*/
print("")
//*/


func doSth() -> Int {
	let v1 = 7
	let v2 = v1 + v1
	
	print(v2)
	return v2
}


type Rect = class {
	var topLeft: Point
	var bottomRight: Point
	
	ctor(topLeft: Point, bottomRight: Point) {
		self.bottomRight = bottomRight
		self.topLeft = topLeft
	}
	
	func str() -> String {
		//return self.bottomRight.str()
		let br = self.bottomRight.str()
		let tl = self.topLeft.str()
		return "Rect(" + tl + ", " + br + ")"
	}
	
	func str2() -> String {
		//return self.bottomRight.str()
		let tl = toString(self.topLeft)
		let br = toString(self.bottomRight)
		return "Rect(" + tl + ", " + br + ")"
	}
}



print("")
print("++++ Rect ++++")

var rect: Rect = Rect(point, Point(10, 11, 12))

print(rect.str())
print("++++ END ++++")

var rs = rect.str()
var rs2 = rect.str2()

print(rs)
print(rs2)
print("Rect(Pointy(8, 7, 9), Pointy(10, 11, 12))")
print("++++ END2 ++++")
// */
